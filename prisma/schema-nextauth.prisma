generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  password           String?
  image              String?
  role               Role               @default(USER)
  accounts           Account[]
  sessions           Session[]
  posts              BlogPost[]
  comments           Comment[]
  marketCommentaries MarketCommentary[]
  createdAt          DateTime           @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model BlogPost {
  id        String    @id @default(uuid())
  title     String
  content   String
  slug      String    @unique
  category  String
  tags      String
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean   @default(false)
}

model PriceEntry {
  id        String   @id @default(uuid())
  market    String
  state     String
  commodity String
  price     Float
  unit      String
  weekStart DateTime
  createdAt DateTime @default(now())
}

model Seller {
  id          String   @id @default(uuid())
  name        String
  products    String
  state       String
  phone       String
  email       String
  verified    Boolean  @default(false)
  description String
  createdAt   DateTime @default(now())
}

model MarketCommentary {
  id        String    @id @default(uuid())
  text      String
  weekStart DateTime
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String            @id @default(uuid())
  body      String
  post      BlogPost?         @relation(fields: [postId], references: [id])
  postId    String?
  market    MarketCommentary? @relation(fields: [marketId], references: [id])
  marketId  String?
  user      User?             @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime          @default(now())
}
